{"id": "TEST1-1", "output_field": "如果添加边时指定的值不包含在 `value_dict` 中，这些字段将被视为 null。"}
{"id": "TEST1-2", "output_field": "返回的名字是 \"Christopher Nolan\" 和 \"Corin Redgrave\"。"}
{"id": "TEST1-3", "output_field": "要查询数据库中现有角色及其相关信息，可以使用GET请求访问`/role/` URI。只有管理员拥有该操作权限，返回结果将包含所有角色及其信息。"}
{"id": "TEST1-4", "output_field": "TuGraph可以创建最多2^(40)个点，每个点可以创建最多2^(32)条边。"}
{"id": "TEST1-5", "output_field": "启动容器后，如果发现没有 `setup.sh` 脚本，可能是您已经进入了容器的默认工作目录，而不是 `setup.sh` 所在的目录。您可以使用 `cd` 命令来改变目录，找到并执行 `setup.sh` 脚本。"}
{"id": "TEST1-6", "output_field": "启动命令 `lgraph_server -d start` 会生成 pid 文件，默认在当前工作目录下。没有参数可以控制 pid 文件路径。"}
{"id": "TEST1-7", "output_field": "在ARM机器（如M1芯片的Mac）编译TuGraph时，需要在cmake命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`选项。"}
{"id": "TEST1-8", "output_field": "cleanup_dir指定的目录用于执行完成后清理操作，包括导入、导出、备份等任务执行完毕后，会清理这些目录。"}
{"id": "TEST1-9", "output_field": "启动 TuGraph 的命令是 `lgraph_server -d start -c lgraph.json`。"}
{"id": "TEST1-10", "output_field": "TuGraph团队通过开源ISO GQL Antlr4语法文件，优化了Antlr4解析性能，大幅提升了解析速度。"}
{"id": "TEST1-11", "output_field": "使用HTTP请求方法`DELETE`来中止一个正在执行的任务。"}
{"id": "TEST1-12", "output_field": "AllocVertexSubset函数用于重建顶点标签和边标签的全文索引，并返回操作成功与否的结果。"}
{"id": "TEST1-13", "output_field": "导入10G数据报错可能是因为文件路径错误或文件格式不正确。请检查文件路径和格式，确保数据文件正确。"}
{"id": "TEST1-14", "output_field": "TuGraph支持导出数据到文本格式，使用DataX配置可以将数据导出到CSV或JSON文件中。"}
{"id": "TEST1-15", "output_field": "除了语句前加EXPLAIN和PROFILE，还可以通过优化图结构、调整索引策略、使用分布式计算和优化网络配置等方式进行调优。"}
{"id": "TEST1-16", "output_field": "RpcSingleClient 构造函数需要以下参数：url（登录地址）、user（用户名）和password（密码）。"}
{"id": "TEST1-17", "output_field": "Cython导入Olap模块通过`from cython.cimports.olap_base import *`方式，图数据库模块则通过Cython编译py文件后使用。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引字段是否唯一，而'pair_unique'参数指定索引字段组合是否唯一。"}
{"id": "TEST1-19", "output_field": "图数据库在处理关联关系时性能更高，兼容性更强，且直观性更好。"}
{"id": "TEST1-20", "output_field": "是的，报错“message: Vertex unique index value [xxx] is too long”通常是因为属性值太长，超出了唯一索引的最大长度限制。在TuGraph中，unique索引key的最大长度是480bytes。"}
{"id": "TEST1-21", "output_field": "如果边不存在该属性，会返回错误代码。"}
{"id": "TEST1-22", "output_field": "TuGraph提供编译环境、运行环境和精简运行环境，满足不同用户需求。编译环境用于源码编译，运行环境用于直接运行，精简运行环境用于快速搭建试用。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型包括Point、Linestring和Polygon。"}
{"id": "TEST1-24", "output_field": "在CREATE LABEL命令中，创建顶点标签时，主要属性名称由`primary`参数确定。"}
{"id": "TEST1-25", "output_field": "在HA模式下，client只能向leader发送导入点边数据请求。"}
{"id": "TEST1-26", "output_field": "在只读事务中调用 SetFields 方法会抛出 `WriteNotAllowed` 异常。"}
{"id": "TEST1-27", "output_field": "GetVertexIndexIterator函数在liblgraph_python_api.Transaction中用于获取顶点索引迭代器，指向具有指定索引值的顶点。"}
{"id": "TEST1-28", "output_field": "db.importor.dataImportor 函数在导入数据时可以指定错误继续执行和线程数。"}
{"id": "TEST1-29", "output_field": "使用 `IsEdgeIndexed` 函数检查索引是否准备好。如果索引准备好，则使用 `GetVertexByUniqueIndex` 获取顶点。"}
{"id": "TEST1-30", "output_field": "如果操作未被授权，调用函数DeleteGraph时会抛出Unauthorized异常。"}
{"id": "TEST1-31", "output_field": "初始化时，每个节点的PageRank值与节点出度成反比，即出度越大，PageRank值越小。"}
{"id": "TEST1-32", "output_field": "TuGraph支持导出数据为csv和json格式。"}
{"id": "TEST1-33", "output_field": "错误提示表明读取数据时超出了数组边界，需要检查数据源配置是否正确，确保数据读取范围在数组内。"}
{"id": "TEST1-34", "output_field": "如果开启了TRAVERSAL_PARALLEL标志，事务必须是只读的。"}
{"id": "TEST1-35", "output_field": "数据文件中的列与配置文件中的 columns 对应时，需要在数据导入页面设置数据对应表，将数据文件中的数据列与目标点/边、对应属性建立映射关系。"}
{"id": "TEST1-36", "output_field": "创建顶点标签时，需要指定参数：label_id（标签 ID）、field_ids（字段 ID 列表）和field_values（字段值）。"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "TuGraph通过schema定义点的属性和存储格式，然后根据schema解析属性值，用于后续计算。"}
{"id": "TEST1-39", "output_field": "TuGraph是由蚂蚁集团开发的。"}
{"id": "TEST1-40", "output_field": "图学习系统用于解决大规模图数据的存储、实时查询、低延迟计算等问题，满足复杂业务场景的需求。"}
{"id": "TEST1-41", "output_field": "该函数需要三个参数：label_name（标签名称）、field_name（字段名称）和field_value（字段值）。"}
{"id": "TEST1-42", "output_field": "配置 RPC 端口，首先确保 `enable_rpc` 设置为 `true`，然后通过 `rpc_port` 指定端口，默认为 9090。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时相比关系型数据库的优势在于：1）性能更高，直接跳转访问类指针，效率比关系型数据库提高2到4个数量级；2）兼容性更强，只需添加新的点、边和属性，无需大规模修改表结构；3）直观性更强，通过点边连接的拓扑结构直观找到所需数据。"}
{"id": "TEST1-44", "output_field": "默认登录密码是：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "SetFields函数的第一个版本中，field_value_strings参数的数据类型是std::vector，它包含字符串类型的元素。"}
{"id": "TEST1-46", "output_field": "DB和TuGraph Analytics可以独立运行，但它们之间通过C++原生语言建立的桥梁实现高效数据交互和指令传递，确保数据交换的计算精度和稳定性。"}
{"id": "TEST1-47", "output_field": "RpcClient 构造函数需要登录地址、用户名和密码作为参数。"}
{"id": "TEST1-48", "output_field": "使用`lgraph_cypher`工具在命令行中提交单条Cypher查询并保存结果，可以通过以下步骤：运行`lgraph_cypher.py`命令，指定配置文件、用户名、密码，并使用`-c`参数执行Cypher查询，结果将直接打印到终端或重定向到文件。"}
{"id": "TEST1-49", "output_field": "数据目录的持久化位置在宿主机的 `/root/tugraph/data`，日志目录的持久化位置在宿主机的 `/root/tugraph/log`。"}
{"id": "TEST1-50", "output_field": "TuGraph 的 Traversal API 中，遍历的起始点设置有三种方式：直接通过点 ID 指定起始点，使用点集指定起始点，以及通过过滤函数指定起始点。"}
{"id": "TEST1-51", "output_field": "方法 `SetField` 的目的是设置指定的字段。"}
{"id": "TEST1-52", "output_field": "TuGraph-DB图数据库是由蚂蚁集团与清华大学合作开发的。"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要安装任何依赖库，仅包含预编译的TuGraph。"}
{"id": "TEST1-54", "output_field": "函数 SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter) 通过参数 root_vertex_filter 使用过滤函数来设置（初始）前沿，每个顶点都会根据这个过滤器进行检查。"}
{"id": "TEST1-55", "output_field": "1. rpm包中包含新版前端页面资源。\n2. 新版本前端资源位于\"/usr/local/share/lgraph/browser-resource\"。\n3. 默认使用新版本前端，可通过修改配置文件选择老版本。"}
{"id": "TEST1-56", "output_field": "启动`tugraph-runtime-centos7`镜像的资源需求取决于具体使用情况，包括启动的进程数、数据量大小和查询复杂度。一般来说，它需要足够的CPU和内存资源来处理查询和存储数据。"}
{"id": "TEST1-57", "output_field": "创建组合索引时，需要提供参数包括：点的label名称、属性名称列表、索引类型（唯一或非唯一）。"}
{"id": "TEST1-58", "output_field": "函数 `SetField` 抛出的异常之一是 `InvalidTxn`，当事务无效时抛出。"}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph图数据库的Python客户端，支持RESTful和RPC两种方式，用于与TuGraph服务器进行交互，执行Cypher查询、调用存储过程等。"}
{"id": "TEST1-60", "output_field": "TuGraph支持X86_64和ARM64架构的物理、虚拟和容器化环境。"}
{"id": "TEST1-61", "output_field": "前两个参数的格式与执行导入脚本类似，都是描述数据格式和实际数据内容。"}
{"id": "TEST1-62", "output_field": "用于表示OGM中类的映射为一个边类型的标签是`@Relationship`，属性包括`label`和`direction`。"}
{"id": "TEST1-63", "output_field": "如果在对 DateTime 对象使用 operator+= 或 operator-= 运算时发生溢出，当前对象不会被修改，并且会抛出 OutOfRange 异常。"}
{"id": "TEST1-64", "output_field": "AlterEdgeLabelAddFields函数成功执行的条件是：标签存在，添加的字段不存在，且当前GraphDB处于有效且可写状态。"}
{"id": "TEST1-65", "output_field": "带权图的边权重是EdgeData类型的数值。"}
{"id": "TEST1-66", "output_field": "RPC通过建立连接，发送请求，并处理响应来工作。开发者创建通道和服务存根，通过存根发送请求，服务器处理请求并返回响应。"}
{"id": "TEST1-67", "output_field": "TuGraph中主键的作用是确保点或边属性的唯一性，用于快速定位和查询数据。"}
{"id": "TEST1-68", "output_field": "RpcException是TuGraph数据库中用于处理远程过程调用（RPC）失败的异常类型。"}
{"id": "TEST1-69", "output_field": "match语句中支持set多个属性。"}
{"id": "TEST1-70", "output_field": "TuGraph DB改进了Antlr4的解析性能，通过开源ISO GQL Antlr4语法文件，大幅提升了Antlr4解析阶段的性能，并支持快速接入图数据库产品，适配ISO GQL语法能力。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点和关系只有一个标签，而OpenCypher允许节点和关系有0到多个标签。"}
{"id": "TEST1-72", "output_field": "函数DeleteVertexIndex成功执行时返回True，如果索引不存在则返回False。"}
{"id": "TEST1-73", "output_field": "目前tugraph-analytics支持窗口函数，通过Window抽象统一了流处理和批处理。"}
{"id": "TEST1-74", "output_field": "当设置json_format参数为false时，CallProcedure函数返回的结果格式是字符串格式。"}
{"id": "TEST1-75", "output_field": "通过调用 `SetFrontier(std::function root_vertex_filter)` 函数来通过传入的过滤器设置初始边界。"}
{"id": "TEST1-76", "output_field": "GeaBase的部署时间取决于具体配置和规模，但通常在几分钟到几小时内完成。"}
{"id": "TEST1-77", "output_field": "图的基本元素包括点和边，点表示事物或实体，边表示点之间的关联关系。"}
{"id": "TEST1-78", "output_field": "TuGraph支持C++, Python, Java编程语言。"}
{"id": "TEST1-79", "output_field": "通过调用 `http://127.0.0.1:7071/db/school/cpp_plugin` 获取存储过程列表。"}
{"id": "TEST1-80", "output_field": "RPC接口是远程过程调用协议，允许开发者通过网络请求远程服务，无需了解底层网络技术。TuGraph提供基于brpc的RPC API，支持多种请求类型，如启用RPC服务、设置端口等。客户端可通过REST或RPC协议发送Token相关请求。"}
{"id": "TEST1-81", "output_field": "The Matrix participated in the \"acted_in\" relationship type."}
{"id": "TEST1-82", "output_field": "启动 TuGraph 服务器使用命令 `./lgraph_server -d start -c lgraph.json`。"}
{"id": "TEST1-83", "output_field": "如果添加顶点时存在相同的 unique_id，将会抛出异常。"}
{"id": "TEST1-84", "output_field": "TuGraph支持X86_64和ARM64架构的平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM项目通过将JAVA对象映射为图中的节点和边，以及属性映射为图对象的属性，支持JAVA开发人员进行图对象映射。它将JAVA对象操作转换为TuGraph的Cypher查询语句，并返回结果为JAVA对象，降低图数据库使用门槛。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中的作用是匹配图模式，如果未命中则返回`null`。"}
{"id": "TEST1-87", "output_field": "通过参数`read_only`控制存储过程是否为只读，当`read_only`为`true`时，存储过程为只读。"}
{"id": "TEST1-88", "output_field": "如果回应的错误码不是成功，则抛出的异常类型是 `InputError`。"}
{"id": "TEST1-89", "output_field": "swap_id函数在Transform操作中用于交换两个顶点的ID。"}
{"id": "TEST1-90", "output_field": "使用Cypher语言，通过以下查询语句可以找到影片《Forrest Gump》的所有演员及其角色：`MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role`。"}
{"id": "TEST1-91", "output_field": "TuGraph-DB社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "TuGraph-DB支持的三种空间数据类型是Point、Linestring和Polygon。"}
{"id": "TEST1-93", "output_field": "产品支持麒麟操作系统，包括开源版和企业版。"}
{"id": "TEST1-94", "output_field": "TuGraph-DB中存储Point类型数据的格式是EWKB，固定长度为50字节，包含编码方式、空间数据类型、数据维度、坐标系EPSG编码和坐标对的16进制表示。"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户执行以下操作：打开或创建数据库，查询或修改数据库，使用存储过程进行复杂查询/更新，以及使用原子操作确保多线程环境下的数据一致性。"}
{"id": "TEST1-96", "output_field": "Date 类的默认构造函数设置的日期是 1970/1/1。"}
{"id": "TEST1-97", "output_field": "如果给定的 vertex_label 或 field 不存在，会抛出 InputError 异常。"}
{"id": "TEST1-98", "output_field": "使用`lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\"`命令执行Cypher查询，并将结果显示为表格格式。"}
{"id": "TEST1-99", "output_field": "reduce_plus函数是用于合并两个ReducedSum类型值的函数，默认实现为累加操作。在ProcessVertexInRange函数中，reduce参数默认为reduce_plus，用于迭代合并每个work处理后的节点返回值。"}
{"id": "TEST1-100", "output_field": "不支持无向边，但可以通过创建两个方向相反的有向边来模拟无向边。"}
{"id": "TEST1-101", "output_field": "FieldData类提供了多种构造函数来初始化不同类型的数据，包括从基本数据类型（如bool、int、float、double）和字符串类型（如std::string、C-string）构造，以及从日期和点对象构造。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过提供基于图数据的航班规划，帮助用户在多个城市间设计最优航班路线，考虑飞行时间和费用，简化旅行路线选择。"}
{"id": "TEST1-103", "output_field": "exists()函数用于检查某个键是否存在。"}
{"id": "TEST1-104", "output_field": "最低配置为4个核心，建议配置为64个核心。"}
{"id": "TEST1-105", "output_field": "MappedVid 函数用于获取某个顶点在 LightningGraph 中的映射 ID。"}
{"id": "TEST1-106", "output_field": "如果尝试更新一个存在的边但标签与指定的不符，将抛出异常。"}
{"id": "TEST1-107", "output_field": "批量在线导入不是通过“CREATE (n), (m)”进行的，而是通过指定文件内容导入的URI `/db/{graph_name}/import/text`，使用POST方法，并包含文件内容描述、数据、分隔符等参数。"}
{"id": "TEST1-108", "output_field": "lgraph_backup工具的主要功能是备份数据库，将TuGraph数据库中的数据备份到另一个目录下，并支持在备份过程中进行compaction。"}
{"id": "TEST1-109", "output_field": "通过使用GET方法和URI `/db/{graph_name}/node/{vertex_id}/property`，可以获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "知识图谱的基本元素包括点和边，点表示事物或实体，边表示点之间的关联关系。"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持C语言和Python语言编写的存储过程。用户可以通过RPC请求对存储过程进行增删改查操作。"}
{"id": "TEST1-112", "output_field": "GetEdgeProp操作的目的是获取边的属性值。"}
{"id": "TEST1-113", "output_field": "TuGraph-DB的主要功能是提供高性能的图数据库服务，支持集中存储、主备复制模式，以及云上存储，同时具备企业级高可用能力和图学习引擎。"}
{"id": "TEST1-114", "output_field": "当Cypher请求的响应不包含正确的结果时，会抛出`Failed`异常。"}
{"id": "TEST1-115", "output_field": "2024年度功能更新预计于2024年3月推出HA支持Witness角色和管理工具。"}
{"id": "TEST1-116", "output_field": "TuGraph-DB使用CMake编译，支持C++17标准，并支持在Linux系统下编译。"}
{"id": "TEST1-117", "output_field": "Cython.cimports.libcpp.unordered_map是Cython模块中导入的C++标准库中的unordered_map容器，用于在Cython代码中实现类似于Python字典的功能。"}
{"id": "TEST1-118", "output_field": "数据预热命令需要指定 `-d {db_dir}` 选项指定 TuGraph 服务器的数据目录，以及 `-g {graph_list}` 选项指定需要进行数据预热的图名称。"}
{"id": "TEST1-119", "output_field": "支持GQL语句，基于ISO GQL标准，并做了一些扩展与改造，但尚未完全支持所有GQL语法。"}
{"id": "TEST1-120", "output_field": "无法从提供的信息中直接找到“log4j-core”和“guava”的版本号。相关信息主要涉及TuGraph-DB的功能更新和社区共创功能，并未提及具体依赖库的版本。"}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法主要用于设置指定用户在图上的访问级别。"}
{"id": "TEST1-122", "output_field": "TuGraph-DB在运行单元测试时，可以通过`log_dir`配置指定日志输出位置，并通过`verbose`配置项控制日志详细程度。在代码中，可以使用`LOG_DEBUG()`, `LOG_INFO()`, `LOG_WARN()`, `LOG_ERROR()`宏输出日志信息。"}
{"id": "TEST1-123", "output_field": "GeaBase 查询中使用 \"Nav\" 语句的一种情况是进行只读查询，例如查询某个节点的邻居节点。"}
{"id": "TEST1-124", "output_field": "通过pair_unique索引可以快速定位到两个顶点间的某条关系边，但接口描述中未提及更新边数据的操作。"}
{"id": "TEST1-125", "output_field": "EOF occurred in violation of protocol (_ssl.c:1002)"}
{"id": "TEST1-126", "output_field": "SybilRank算法的执行过程中主要采用随机游走的方式进行计算，从非Sybil节点开始，进行提前终止的随机游走。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中起到以下作用：1）定义了节点和边的特征，如属性类型和大小；2）指导了如何解析和存储属性值；3）支持图神经网络等深度学习模型，通过学习属性和图结构来捕获复杂模式。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，提交代码前先提交一个issue是为了避免与其他开发者发生冲突，让维护人员讨论并确定修改的必要性和最佳方案，减少沟通成本和代码被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版是开源的，提供基础功能和单实例部署，适用于学习和小型项目；企业版则包含分布式数据库、离线计算和流式计算，支持私有化和云部署，适用于大规模生产和复杂场景。"}
{"id": "TEST1-130", "output_field": "输出结果包括准备时间、核心处理时间、找到的顶点数、输出时间、总时间，以及“DONE.”表示完成。"}
{"id": "TEST1-131", "output_field": "当Key_start和key_end等于v时，VertexIndexIterator通过索引字段值v，返回指向所有具有该字段值v的顶点的迭代器。"}
{"id": "TEST1-132", "output_field": "将顶点数据写入图数据库，使用`WriteToGraphDB`函数，传入存储顶点数据的并行向量和顶点字段名称。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction的作用是提供一个事务上下文，用于执行数据库操作，确保数据的一致性和完整性。"}
{"id": "TEST1-134", "output_field": "在执行`ProcessVertexActive`函数时，如果运行时出现错误，会引发`std::runtime_error`异常。"}
{"id": "TEST1-135", "output_field": "如果指定json_format参数为false，返回结果的格式是字符串格式。"}
{"id": "TEST1-136", "output_field": "Prometheus的地址是localhost:9111。"}
{"id": "TEST1-137", "output_field": "TuGraph图分析引擎主要面向全图/全量数据分析类任务，支持多种迭代式图算法，如BFS、PageRank等，适用于社区发现、基因序列预测等场景。"}
{"id": "TEST1-138", "output_field": "如果表内属性字段名为id时，应确保node_id字段与id字段对应，避免重复或冲突。"}
{"id": "TEST1-139", "output_field": "在OGM创建节点和边的代码示例中，用于创建边标签\"DIRECT\"的代码部分是`@Relationship`注解，其中指定了label为\"DIRECT\"。"}
{"id": "TEST1-140", "output_field": "可以统一返回可视化页面的结构，例如将所有返回结果转换为具有相同键（如 \"data\"）的JSON对象，其中包含一个数组，该数组包含每个结果的键值对。"}
{"id": "TEST1-141", "output_field": "为基于ARM的机器（如Mac M1）配置CMake编译TuGraph时，需在`cmake`命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`选项。"}
{"id": "TEST1-142", "output_field": "单机配置完成后，可正确显示饼图和折线图。"}
{"id": "TEST1-143", "output_field": "使用 `algo.shortestPath` 函数查询两点间的最短路径，输入参数为起始节点、结束节点和配置参数。"}
{"id": "TEST1-144", "output_field": "不支持通过Cypher或Python修改schema。"}
{"id": "TEST1-145", "output_field": "TuGraph-Restful-Server使用brpc框架支持HTTP协议，提供文件上传、数据导入、导入进度查询、Cypher查询和文件删除等功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限，即无法访问或操作通过该角色获得的图形。"}
{"id": "TEST1-147", "output_field": "1. 确保您有权授予贡献内容的许可。\n2. 保证贡献内容为原创，并披露所有相关第三方许可或限制。\n3. 遵循公司规定，以公司名义提交贡献内容。"}
{"id": "TEST1-148", "output_field": "要清空数据保留schema，可以使用`session.deleteAll(Movie.class)`删除所有Movie节点，然后调用`session.purgeDatabase()`删除全部数据。"}
{"id": "TEST1-149", "output_field": "OGM在将JAVA对象映射为图对象、简化Cypher语句操作、以及兼容其他开源产品方面类似于MyBatis。"}
{"id": "TEST1-150", "output_field": "是的，BROWSER 有 Docker 部署。可以通过 `docker run` 命令启动容器，并使用默认端口访问。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB支持使用`lgraph_import`工具导入数据，支持CSV和jsonline格式，并分为离线模式和在线模式。相关代码在TuGraph GitHub的`src/client`目录。"}
{"id": "TEST1-152", "output_field": "图数据库在处理关联关系时性能更高，兼容性更强，且直观性更好。"}
{"id": "TEST1-153", "output_field": "客户端 SDK 支持 Java、Python、C++ 等多种编程语言。"}
{"id": "TEST1-154", "output_field": "OGC定义了EWKT（扩展已知文本）和EWKB（扩展已知二进制）两种空间数据的标准表示格式。"}
{"id": "TEST1-155", "output_field": "db.importor.dataImportor函数的目的是导入点或边数据。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是蚂蚁集团推出的商业化图数据库解决方案，支持分布式集群架构，提供一站式图平台、多种图计算引擎、多地多中心部署形态和专家支持服务，适用于商业场景。"}
{"id": "TEST1-157", "output_field": "使用HTTP GET方法和URI `/listProcedures` 来请求存储过程列表。"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含广度优先搜索（BFS）、网页排序（PageRank）、单源最短路径（SSSP）、弱连通分量（WCC）、平均集聚系数（LCC）和标签传播（LPA）等算法。"}
{"id": "TEST1-159", "output_field": "REST服务器的默认端口号是7070。"}
{"id": "TEST1-160", "output_field": "调用函数 `DisableRole(const std::string &role)` 来禁用角色，如果角色不存在则返回 false。"}
{"id": "TEST1-161", "output_field": "更新TuGraph不会丢失原库数据，因为它支持主备复制模式，确保数据一致性。"}
{"id": "TEST1-162", "output_field": "如果节点中未包含属性\"belt\"，应该返回一个默认值或空值，具体取决于应用场景和业务需求。"}
{"id": "TEST1-163", "output_field": "磁盘IO警报是在磁盘IO超过10MB/S时触发的。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 变为无效。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示图加载方式，输入文件为非对称图，加载图为非对称图。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在且nearest参数为true时，Goto函数将尝试获取到该顶点ID的下一个入边，按(label, tid, src, eid)排序。如果没有这样的边，迭代器变为无效并返回false。"}
{"id": "TEST1-167", "output_field": "最终返回的结果是图内root_vid根节点连接的节点个数，即`found_vertices`的值。"}
{"id": "TEST1-168", "output_field": "TuGraph中“refresh_time”的默认设置是0。"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，要查找特定时间戳的边属性，可以通过Edge对象的GetTemporalId()方法获取时间ID，然后使用该ID作为查询条件。"}
{"id": "TEST1-170", "output_field": "默认的端口号是7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法，开源版本中包含单机版图数据库和离线图分析引擎，企业版包含分布式图数据库和流式图计算功能。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含加载、列举、获取详情、调用、删除和更新存储过程的功能。"}
{"id": "TEST1-173", "output_field": "执行 CallGql 函数成功时返回 True，失败时返回 False。"}
{"id": "TEST1-174", "output_field": "TuGraph中执行复杂图分析操作，需要将存储中的图数据导出成内存中的快照，然后使用OLAP API进行串行执行，以充分利用CPU资源。"}
{"id": "TEST1-175", "output_field": "filter_output_default函数的主要作用是作为默认的写入数据规则函数，用于确保写入数据满足特定要求。"}
{"id": "TEST1-176", "output_field": "在Java运行时，MyBatis Generator的XML配置文件中，targetProject应配置为生成文件的目录路径。"}
{"id": "TEST1-177", "output_field": "`@Property(\"class\")`注解指定了数据库字段名为\"class\"。"}
{"id": "TEST1-178", "output_field": "在TuGraph中，可以通过Cypher语句删除图中的重复关系。"}
{"id": "TEST1-179", "output_field": "默认情况下，第一次快照的时间在0到ha_snapshot_interval_s秒内的任一时刻随机设置。"}
{"id": "TEST1-180", "output_field": "您需要标注作品的来源、您个人所知悉的任何许可或其他限制（包括专利、商标和许可协议）的完整信息，并以显著方式标明作品是以第三方名义提交的。"}
{"id": "TEST1-181", "output_field": "导入数据后，查询结果不同可能是因为数据导入时使用了不同的参数，如分隔符、错误处理策略等。此外，查询时使用的图和超时参数也可能导致结果差异。"}
{"id": "TEST1-182", "output_field": "TuGraph-OGM支持将JAVA对象映射到TuGraph中，提供对象操作接口，兼容Neo4j-OGM，方便用户在不同数据库间无缝迁移。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，实例化liblgraph_client_python.client对象需要传入服务器地址、用户名和密码，格式为`client = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")`。"}
{"id": "TEST1-184", "output_field": "如果传递给 `GetRoleInfo` 函数的角色名非法，会抛出 `InputError` 异常。"}
{"id": "TEST1-185", "output_field": "TuGraph的部署方式包括云部署、Docker部署和本地部署。云部署适用于新手，Docker部署适用于对硬件有要求的用户，本地部署适用于指定生产环境。"}
{"id": "TEST1-186", "output_field": "跳过第一行后返回的第一位人物的名字是 \"Corin Redgrave\"。"}
{"id": "TEST1-187", "output_field": "如果导入数据失败，可以选择是否继续导入，这取决于`continue_on_error`参数的设置。"}
{"id": "TEST1-188", "output_field": "您应该使用 `ResetHeader` 方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "蚂蚁集团的个人贡献者许可协议主要目的是为了明确个人或实体贡献内容时授予的知识产权许可，并确保贡献者同意相关许可条款。"}
{"id": "TEST1-190", "output_field": "TuGraph Mini Runtime Image不包含Java、Python相关功能，不支持C++ plugin编译运行，仅支持so文件上传。"}
{"id": "TEST1-191", "output_field": "Procedure及Embed主要使用了OlapOnDB类和辅助函数，如ParallelVector、ParallelBitset、AdjUnit/AdjUnit、AdjList等，以及BSP计算模型和快照存储结构。"}
{"id": "TEST1-192", "output_field": "在尝试为用户设置新密码时，可能会抛出以下异常：\n1. InvalidGalaxy：如果当前星系无效。\n2. Unauthorized：如果用户没有权限，或当前用户等于用户但旧密码不正确。\n3. InputError：如果新密码不合法。"}
{"id": "TEST1-193", "output_field": "要使用 `liblgraph_python_api.Galaxy` 类创建一个新的用户账户，请调用 `CreateUser` 方法，传入用户名称、密码和描述。"}
{"id": "TEST1-194", "output_field": "调用`DeleteVertexLabel`方法可以删除一个顶点标签。"}
{"id": "TEST1-195", "output_field": "角色被禁用后，用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-196", "output_field": "TuGraph的可视化监控主要使用了TuGraph Monitor、Prometheus和Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph的配置文件以JSON格式存储，通常位于`/usr/local/etc/lgraph.json`。"}
{"id": "TEST1-198", "output_field": "`StudentMapper`中`selectVertex`方法的超时设置默认为0毫秒。"}
{"id": "TEST1-199", "output_field": "PathTraversal 类中展开当前前沿的操作可以使用出边过滤函数（out_edge_filter）、入边过滤函数（in_edge_filter）、出边邻居过滤函数（out_neighbour_filter）和入边邻居过滤函数（in_neighbour_filter）进行过滤。"}
{"id": "TEST1-200", "output_field": "当在只读交易中调用函数时，如果尝试执行写入操作，会抛出异常。"}
{"id": "TEST1-201", "output_field": "模块通常放在每个worker工作节点的虚拟环境中，使用requirements.txt管理依赖库。"}
{"id": "TEST1-202", "output_field": "\"available\"资源名称对应的颜色设置为固定的“light-orange”。"}
{"id": "TEST1-203", "output_field": "要删除图库中的数据，可以使用`DropAllData`方法删除所有数据，包括顶点、边、标签和索引。"}
{"id": "TEST1-204", "output_field": "当使用 TuGraph 批量创建边成功时，响应中将返回代码 200，并包含新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为底层存储数据结构是因为B+树具有较好的顺序读写性能，适合实时增删查改事务，且在读取放大和空间放大方面表现优于LSM树，更适合读性能优先的场景。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持以下参数设置以改变返回结果的格式：`json_format` 参数，当设置为 `True` 时返回 JSON 格式，默认为 `True`；当设置为 `False` 时返回字符串格式。"}
{"id": "TEST1-207", "output_field": "1. 使用`WITH`语句优化查询，将中间结果传递给后续查询。\n2. 使用`*..`查询任意跳的边。\n3. 缓存带参数的Cypher查询执行计划，加速后续同类查询。"}
{"id": "TEST1-208", "output_field": "当FieldData不是INT8、INT16、INT32或INT64类型时，integer() 方法会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB的存储引擎使用了KV数据库，是基于C++语言开发的，兼容多种操作系统和CPU。"}
{"id": "TEST1-210", "output_field": "1. 修改配置文件\"/usr/local/etc/lgraph.json\"中的\"web\"参数，设为\"/usr/local/share/lgraph/resource\"或\"/usr/local/share/lgraph/browser-resource\"。\n2. 执行命令`docker restart tugraph`使更改生效。\n3. 新版本是默认选项，如需切换，需手动修改配置并重启服务。"}
{"id": "TEST1-211", "output_field": "TuGraph在进行大规模数据查询时，并未直接提及对图数据进行压缩。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构，主要原因是B+树具有较好的顺序读写性能，适合读性能优先的场景。"}
{"id": "TEST1-213", "output_field": "TuGraph-DB使用的boost库版本信息未在提供的信息中明确指出。"}
{"id": "TEST1-214", "output_field": "TuGraph适合需要处理TB级别数据、进行复杂关系分析的用户，包括图数据库开发者、数据科学家和需要高性能图计算的企业。"}
{"id": "TEST1-215", "output_field": "TuGraph的REST API中，POST请求主要用于创建实体、提交Cypher查询以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "最低外存配置为100GB，建议配置为实际数据大小的4倍，例如数据1TB则准备4TB硬盘。"}
{"id": "TEST1-217", "output_field": "如果指定的目录不存在，构造函数会检查 `create_if_not_exist` 参数。如果该参数为 `true`，则构造函数会尝试创建数据库；如果为 `false`，则抛出 `DBNotExist` 异常。"}
{"id": "TEST1-218", "output_field": "默认的 n_limit 参数值是 `std::numeric_limits::max()`，即 18446744073709551615。"}
{"id": "TEST1-219", "output_field": "默认等待秒数是10秒。"}
{"id": "TEST1-220", "output_field": "生成Mapper接口时，XMLMAPPER类型将使用XML配置文件来映射接口方法。"}
{"id": "TEST1-221", "output_field": "GCN模型的主要组成部分包括图卷积层（GraphConv）、激活函数（如ReLU）和dropout层。"}
{"id": "TEST1-222", "output_field": "TuGraph-DB的单元测试使用gtest框架，集成测试则采用pytest框架。"}
{"id": "TEST1-223", "output_field": "可以先用Cypher找到子图，然后在该子图上运行图分析，如PageRank、k-core等。"}
{"id": "TEST1-224", "output_field": "HA集群的snapshot删除时间取决于配置的ha_snapshot_interval_s参数，默认情况下，snapshot会在ha_snapshot_interval_s秒后自动删除。"}
{"id": "TEST1-225", "output_field": "目前，TuGraph-DB支持使用Open Cypher作为查询语言，并计划在将来支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "语句中没有明确提及开启事务和结束事务的关键字，但通过`Transaction`类和`Begin`消息可以推断出事务的开启和结束。"}
{"id": "TEST1-227", "output_field": "使用命令创建新角色并添加描述信息，需发送POST请求至`/role` URI，包含角色名和描述信息。"}
{"id": "TEST1-228", "output_field": "目前TuGraph查询语句不支持不定长边的条件查询。"}
{"id": "TEST1-229", "output_field": "在Java运行时，targetProject在xml配置文件中应配置为Maven依赖，例如：\n\n```xml\n<dependency>\n    <groupId>org.neo4j.driver</groupId>\n    <artifactId>neo4j-java-driver</artifactId>\n    <version>4.4.2</version>\n</dependency>\n```"}
{"id": "TEST1-230", "output_field": "2024年功能更新计划中支持的角色包括HA支持Witness角色，工具包括管理工具、流处理和参数化查询工具、Cypher支持工具等。"}
{"id": "TEST1-231", "output_field": "要指定查询的图名称，可以在调用 \"CallGql\" 接口时，通过参数 \"graph\" 指定。如果未指定，默认查询 \"default\" 图。"}
{"id": "TEST1-232", "output_field": "图中可以展示属性值。通过属性筛选功能，用户可以选择点或边类型，设置属性条件进行筛选，检索到的数据会在画布上高亮显示，从而展示属性值。"}
{"id": "TEST1-233", "output_field": "tugraph-db兼容neo4j的通讯协议，可以使用neo4j的驱动连接。支持Bolt协议，默认端口7687。使用示例中，通过Bolt客户端连接，如`Driver driver = GraphDatabase.driver(\"bolt://ip:port\", AuthTokens.basic(\"admin\", \"73@TuGraph\"));`。"}
{"id": "TEST1-234", "output_field": "查不到有属性的边数据可能是因为这些边没有正确地按照schema定义的格式存储在磁盘中。需要检查schema定义是否正确，以及边数据是否按照schema格式存储。"}
{"id": "TEST1-235", "output_field": "通过在`job_actors.json`配置文件中设置`reader`读取`actors.csv`，并使用`tugraphwriter`将数据写入TuGraph。"}
{"id": "TEST1-236", "output_field": "创建新子图时需要填写子图名称、子图描述、配置信息，并点击确认。"}
{"id": "TEST1-237", "output_field": "在test_export_default函数中，通过执行离线导入逻辑导入数据，导出后再次导入到新目录，以新导入的数据启动db并创建链接，然后在test_export_default函数主体中判断导出后再次导入的数据是否与原始数据一致。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值代表该节点在执行Work函数后的状态或结果。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-240", "output_field": "如果批量创建点的操作成功，TuGraph 会返回代码 200，并在 JSON 内容中返回新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph支持混合检索，包括vector和知识图谱。它通过融合图查询和图分析引擎，提供一致的使用体验，并支持多种查询语言，如Open Cypher和ISO GQL。"}
{"id": "TEST1-242", "output_field": "TuGraph 数据预热的主要目的是为了改善服务器刚开启后由于频繁的 IO 操作导致的系统性能变差问题。"}
{"id": "TEST1-243", "output_field": "`GetSrc` 方法返回源顶点的 ID。"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于匹配图模式，如果未命中，则返回`null`。它允许查询中包含可能不存在的节点或关系，从而提高查询的灵活性。"}
{"id": "TEST1-245", "output_field": "GraphDB无法使用的情况包括：1）没有适当访问权限；2）调用Close()后，图变为无效；3）当前GraphDB无效时执行操作。"}
{"id": "TEST1-246", "output_field": "TuGraph 运行需要保证库文件 liblgraph.so 的文件位置在环境变量 LD_LIBRARY_PATH 中。"}
{"id": "TEST1-247", "output_field": "当`GetNumOutEdges`函数达到限制时，它返回当前已计算的传出边的数量，并将`more_to_go`参数设置为`true`，如果提供了该参数。"}
{"id": "TEST1-248", "output_field": "BFS算法在每次迭代中通过`active_in`数组存储上一轮找到的节点，通过`active_out`数组存储当前轮次找到的节点，并更新`num_activations`表示当前轮次找到的节点个数。"}
{"id": "TEST1-249", "output_field": "角色名的允许最大长度是64字节。"}
{"id": "TEST1-250", "output_field": "PUT"}
